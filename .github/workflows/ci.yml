name: ci

on:
  push:
    branches:
      - main
      - dev
      - ci
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+**"

permissions:
  contents: write

env:
  QT_STATIC_DIR: Qt/static

# Standard format of uploaded asset:
# CanvasSync-${{ github.ref_name }}-${{ matrix.os }}.{app,exe,deb}

jobs:
  mac:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-11
            version: 6.2.0
          - os: macos-12
            version: 6.2.0
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set environment variables
        run: |
          echo "ASSET=Canvas-Sync-${{ github.ref_name }}-${{ matrix.os }}.dmg" >>$GITHUB_ENV
          echo "QT_STATIC_DIR=$PWD/${{ env.QT_STATIC_DIR }}" >>$GITHUB_ENV

      - uses: actions/checkout@v3

      - name: download pre-build static Qt libraries
        run: |
          curl -fLo qt.tar.gz https://github.com/nguyenvukhang/qt-static/releases/download/v0.0.18/qt-${{ matrix.version }}-${{ matrix.os }}.tar.gz
          mkdir -p ${{ env.QT_STATIC_DIR }}
          tar -xvzf qt.tar.gz && mv qt_output/* ${{ env.QT_STATIC_DIR }}

      # build canvas-sync
      - run: make build

      # package app
      - run: |
          mkdir dmg
          cp -a 'build/Canvas Sync.app' 'dmg/Canvas Sync.app'
          mv ./deploy/mac-readme.txt dmg/README.txt
          ln -s /Applications dmg/Applications
          hdiutil create -volname CanvasSync \
            -srcfolder dmg \
            -fs HFS+ -ov -format UDBZ \
            ${{ env.ASSET }}

      # upload release package
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
          files: ${{ env.ASSET }}
          generate_release_notes: true

  win:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            version: 6.4.2
          - os: windows-2022
            version: 6.4.2
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set environment variables
        shell: bash
        run: |
          echo "ASSET=Canvas-Sync-Installer-${{ github.ref_name }}.exe" >>$GITHUB_ENV

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          arch: win64_msvc2019_64
          version: ${{ matrix.version }}
          tools: tools_ifw

      - name: Install MSVC 2022
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install build dependencies
        shell: bash
        run: cinst -y ninja

      - uses: actions/checkout@v3

      - name: Build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -S . -B build -G Ninja `
            -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }}
          cmake --build build

      - name: Use windeployqt to load libraries
        shell: bash
        run: |
          cd build
          mv 'Canvas Sync.exe' ..
          rm -rf *
          mv '../Canvas Sync.exe' .
          $Qt6_DIR/bin/windeployqt.exe 'Canvas Sync.exe'
          cd ..

          rm -rf deploy/windows/packages/com.nguyenvukhang.canvassync/data
          mv build deploy/windows/packages/com.nguyenvukhang.canvassync/data
          cd deploy/windows/packages/com.nguyenvukhang.canvassync/data

      - name: Package the installer
        shell: bash
        run: |
          cd deploy/windows
          $IQTA_TOOLS/QtInstallerFramework/4.5/bin/binarycreator.exe \
            -c config/config.xml -p packages ${{ env.ASSET }}
          mv ${{ env.ASSET }} ../..

      # upload release package
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-2019'
        with:
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
          files: ${{ env.ASSET }}
          generate_release_notes: true
